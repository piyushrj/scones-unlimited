{
    "Comment": "A description of my state machine",
    "StartAt": "Serialize Image",
    "States": {
      "Serialize Image": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "Payload.$": "$",
          "FunctionName": "arn:aws:lambda:us-east-1:063444600624:function:serializeImageData:$LATEST"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Infer Image"
      },
      "Infer Image": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-1:063444600624:function:inferImage:$LATEST",
          "Payload": {
            "image_data.$": "$.body.image_data",
            "s3_bucket.$": "$.body.s3_bucket",
            "s3_key.$": "$.body.s3_key"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "Filter Inference"
      },
      "Filter Inference": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "FunctionName": "arn:aws:lambda:us-east-1:063444600624:function:filterInference:$LATEST",
          "Payload": {
            "image_data.$": "$.body.image_data",
            "s3_bucket.$": "$.body.s3_bucket",
            "s3_key.$": "$.body.s3_key",
            "inferences.$": "$.body.inferences"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "End": true
      }
    }
  }